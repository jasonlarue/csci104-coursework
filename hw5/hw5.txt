PROBLEM 1c:
1 3 5 7 9 2 4 6 8 10
1 3 5 7 2 4 6 8 | 9 10
1 3 5 2 4 6 | 7 8 9 10
1 3 2 4 | 5 6 7 8 9 10
QuickSort starts by making 9 the pivot, which is the second largest element in
the array.

PROBLEM 2:
We can use an array where all entries except the last are extremely small
relative to the last, which is extremely large, and we will tell interpolation
search to find the second to last value. Such an array might look like:
1, 1.001, 1.002, 1.003, 1.004 1.005, 100 trillion. This will fool interpolation
search because the search assumes a uniform distribution across the array,
but in this case we have an extremely un-uniform distribution. Interpolation
search uses the following algorithm to find which entry to search:

(target-startvalue) * (endindex-startindex+1)/(endvalue-startvalue)
                                              + startindex = desiredindex

When this algorithm is called initially with startvalue 1, it will get a
desired index very close to 1, so it will search 1, determine it is not the
value we are looking for (in this case 1.005), and start again with startvalue
of 1.001. It will find a desiredindex very close to 1.001, determine it is not
1.005, and similarly keep querying every value until it gets to the value
itself, 1.005. Keep in mind that the last element (in this case 100 trillion) is
also queried, because before interpolation search runs it accesses the first
and last element to establish values for startvalue and endvalue. Therefore
this array makes interpolation sort access every value in the array.




PROBLEM 3:

T quantile (T* a, int left, int right, int k)
{ /* a is the array to look in.
     left and right are the bounds of the subarray we search in.
     k is the index (starting at 0, with a left end of left)
     of the element we would like, in the sorted version of the array.
     If that sounds confusing, think about it as follows:
     We could sort a between left and right, and return a[k+left]
     after sorting. But that would take too long. */

  if (right <= left + 10) // we are down to a small array
  {  // sorting and looking up after sorting is fast enough.
    InsertionSort (a, left, right);  // Sorts a between left and right.  THIS IS CONSTANT RUN TIME
    return a[k+left];
  }
    else   // we still have a pretty big array left
  {
    int smallsize = (right-left)/5;               CONSTANT TIME
    T *b = new T[smallsize];

    /* The next loop considers the array in groups of 5.
       For each such group, the median (which is element 2) is copied
       into the new array b.
       If the number of elements is not divisible by 5, then the last
       few elements are not considered here. */
    for (int i = 0; i < smallsize; i ++)
       b[i] = quantile (a, left+5*i, left+5*(i+1)-1, 2);

    /* The next line is key: it finds the median of the elements of b,
       i.e., the median of the medians of groups-of-5. */
    T pivot = quantile (b, 0, smallsize-1, smallsize/2);      RUNTIME IS T(N/5)

    /* Now, we need to find the pivot in a, so we can swap it into
       the rightmost position. We use linear search, since a is not sorted. */
    int p = linearSearch (a, left, right, pivot);         RUNTIME T(N)
    a.swap (p, right);                      RUNTIME T(1)

    // The partition function here is exactly our old friend from Quicksort.
    int m = partition (a, left, right);       RUNTIME T(N)

    /* Finally, we can compare the position of the pivot to the position we
       are looking for.
       If they are equal, the pivot was what we wanted.
       If we are looking for an earlier position,
       we need to search in the left subarray.
       If we are looking for a later position,
       we need to search in the right subarray.
       But we also need to subtract the pivot's position,
       since position 5 in an array of size 8
       is equal to position 1 in the right half of the array. */
    if (left+k == m) return a[m];
    else if (left+k < m) return quantile (a, left, m-1, k);
    else return quantile (a, m+1, right, k-(m+1-left));
  }
}

PROBLEM 3 PART A:

1. Runtime of InsertionSort is constant because it only sorts 10 elements at a
time due to the if statement base case at the beginning. The line where
linear search is done takes theta(n). When m is initilanized using partion
it takes theta(n).

2. The input for the recursive call is of size 5, because the algorithm splits
the input into subarrays all of size 5. The recursive calls to quantile take
theta(n/5) * theta(5), which can be simplified to theta(n). quantile is called
recursively n/5 times.

3. Because the array is a fifth of the size of the original input a array, it
will have size n/5 and thus take theta(n/5).

4. For a given array of length n, we know that there will be n/5 (rounding down)
partitions. When we pick the median of the array of medians (this array
is called b) of these partitions, we know that since this list of medians is
sorted, the number of elements in b that are less than equal to the median of
this list is n/10, because half of the medians will be <= the median of the
list, and since there are n/5 medians we take half of this to get n/10
(where n still represents the length of the original array). Keep in mind
that the median of b is included in this subset of elements that are less than
or equal to the median, because the median is equal to itself. Inside of these
partitions that are <= to the median, we know that there are 3 elements that are
guaranteed to be <= to the median. We know this because firstly the median of
these partitions are guaranteed to be <= the median of b, which gives us 1 of
our 3 elements. Due to the nature of the way medians are selected, there are
two elements in each partition that are <= to the median of their partition,
and if the median of the partition is <= the median of b, then these two
elements inside the partition must also be <= the median of b. Combining
these two facts we learn that for each of the partitions whose median
is <= the median of b, there are 3 elements <= the median of b, and since
we know that there are n/10 partitions whose median is <= the median of b,
we arrive at the answer of 3 * (n/10) or 3n/10.
